dataset - Customer review dataset

To work with this dataset, I would like to choose SQL database due to sevral reasons and they are as below.
    Structured Data: The relationships between customers, products, and reviews are clearly defined and fit well into a relational model.

    ACID Compliance: SQL databases provide strong consistency guarantees which are crucial for ensuring that data integrity is maintained across the entire system (e.g., when customers post reviews).

    Complex Queries: SQL databases excel at handling complex queries involving JOINs, filtering, and aggregation, such as calculating the average rating of a product or fetching reviews for a product.

Here some sample queries which are used to featch data

1.Find all reviews for a specific product:

SELECT Customer.name, Review.rating, Review.review_text
FROM Review
JOIN Customer ON Review.customer_id = Customer.customer_id
WHERE Review.product_id = 1;

This query retrieves all reviews for the product with product_id = 1, showing the customer's name, their rating, and the review text.

2.Find average rating for a specific product:

SELECT AVG(rating) AS average_rating
FROM Review
WHERE product_id = 1;

This query calculates the average rating for a product with product_id = 1

3.Find products purchased by a specific customer (assuming there's a Purchase table):

SELECT Product.name, Purchase.purchase_date
FROM Purchase
JOIN Product ON Purchase.product_id = Product.product_id
WHERE Purchase.customer_id = 1;

This query retrieves the list of products purchased by the customer with customer_id = 1

4.Find the most popular product (based on average rating):

SELECT Product.name, AVG(Review.rating) AS average_rating
FROM Review
JOIN Product ON Review.product_id = Product.product_id
GROUP BY Product.name
ORDER BY average_rating DESC
LIMIT 1;

This query finds the product with the highest average rating.


Optimizing queries for performance is crucial here. There are some techniques we can use here.

1. Indexing:
Indexes can drastically improve query performance, especially for columns that are frequently queried or used in JOIN conditions.

Ex: Create indexes on columns like product_id, customer_id, and rating for faster lookups and JOIN operations:

2.Use Proper Joins:
Use INNER JOIN for queries that require matching records between tables, and LEFT JOIN only when we need to include records from one table even if there are no matches in the other table.

3. Query Caching:
SQL databases (e.g., PostgreSQL, MySQL) often support query caching. For frequently executed queries, enabling query caching can speed up performance by avoiding redundant query execution.

4. Pagination:
For large result sets, avoid fetching all records at once. Use LIMIT and OFFSET to implement pagination and only fetch the required subset of data.


If we are considering Graph Database we have to do as below

Here data is stored as nodes (representing entities like products and customers) and edges (representing relationships like reviews or purchases)

1. Modeling the Data in a Graph Database
 Ex:
CREATE (p:Product {name: 'Laptop', category: 'Electronics', price: 1000.00, description: 'A high-performance laptop'})
CREATE (c:Customer {name: 'Alice', email: 'alice@example.com'})
CREATE (c)-[:REVIEWED {rating: 5, review_text: 'Great laptop, very fast!'}]->(p)

Some of the query examples are as below.

1. Find all reviews for a specific product:
MATCH (c:Customer)-[r:REVIEWED]->(p:Product)
WHERE p.name = 'Laptop'
RETURN c.name AS customer_name, r.rating, r.review_text;

2. Find related products that a customer might like based on shared reviews:
MATCH (c:Customer)-[:REVIEWED]->(p:Product)<-[:REVIEWED]-(other:Customer)-[:REVIEWED]->(related:Product)
WHERE p.name = 'Laptop' AND p <> related
RETURN DISTINCT related.name AS related_product
LIMIT 5;


The following table showcase the diffrence between SQL and NoSQL database differences and their usage

## ðŸ”„ SQL vs NoSQL: A Complete Comparison

| **Feature**       | **SQL Databases**                                                                 | **NoSQL Databases**                                                                                 |
|-------------------|------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------|
| **Data Model**     | Relational â€“ data organized into tables with rows and columns.                    | Non-relational â€“ data stored as documents, key-value pairs, wide-column stores, or graphs.          |
| **Schema**         | Fixed schema â€“ requires predefined structure.                                     | Flexible or schema-less â€“ easily accommodates changes in data structure.                            |
| **Query Language** | SQL (Structured Query Language) â€“ standardized, powerful with JOINs.              | Varies â€“ e.g., MongoDB (JSON queries), Cassandra (CQL), Neo4j (Cypher).                             |
| **Scalability**    | Vertical scaling â€“ scale up with more powerful hardware.                          | Horizontal scaling â€“ scale out across servers/nodes.                                                 |
| **Consistency**    | Strong ACID compliance â€“ reliable and consistent transactions.                    | BASE model â€“ eventual consistency (tunable in some NoSQL DBs).                                      |
| **Relationships**  | Supports relationships via foreign keys and JOINs.                                | Uses embedded docs, references, or graph edges for relationships.                                   |
| **Performance**    | High for structured data and complex queries, but can slow with large joins.      | High read/write performance, great for large-scale or varied structures.                            |
| **Flexibility**    | Rigid â€“ difficult to change schema or add new fields.                             | Very flexible â€“ ideal for evolving data models and agile development.                               |
| **Use Cases**      | Banking, finance, inventory, ERP, CRM â€“ where integrity and complex queries rule. | Content management, IoT, product catalogs, mobile apps, real-time analytics and user-generated data.|
| **Examples**       | MySQL, PostgreSQL, Oracle, SQL Server                                              | MongoDB, Cassandra, Couchbase, Firebase, Neo4j, Amazon DynamoDB                                     |
| **When to Use**    | When your data is structured and consistency is key.                              | When you need scalability, flexibility, and fast handling of unstructured/semi-structured data.      |



